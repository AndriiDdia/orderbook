version: '3'
services:

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
     - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
     - "9092:9092"
    expose:
     - "9093"
    environment:
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "orderbook_topic:1:1"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock

  fetcher:
    build: .
    container_name: fetcher
    restart: always
    depends_on:
      - kafka
      - zookeeper
    environment:
      SLEEP_INTERVAL: 1
      TOPIC: orderbook_topic
      KAFKA_BROKER_ADDRESSES: "localhost:9092,kafka:9093"
      SYMBOL: ETHUSDT
    volumes:
      - ./app:/var/app
    entrypoint: ["python", "fetcher.py"]
 
  dashboarder:
    build: .
    container_name: dashboarder
    restart: always
    ports:
      - 8050:8050
    depends_on:
      - kafka
      - zookeeper
      - fetcher
    environment:
      TOPIC: orderbook_topic
      KAFKA_BROKER_ADDRESSES: "localhost:9092,kafka:9093"
      LEVELS_TO_SHOW: 10
    volumes:
      - ./app:/var/app
    entrypoint: ["python", "dashboarder.py"]

  storage:
    build: .
    container_name: storage
    restart: always
    depends_on:
      - kafka
      - zookeeper
      - fetcher
    environment:
      TOPIC: orderbook_topic
      KAFKA_BROKER_ADDRESSES: "localhost:9092,kafka:9093"
      POSTGRES_HOST: techtrade.c7iuga7d0to2.eu-central-1.rds.amazonaws.com
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ugFVs6eC52zA
      POSTGRES_DB: crypto
      LEVELS_TO_SAVE: 50
      SYMBOL: ETHUSDT
    volumes:
      - ./app:/var/app
    entrypoint: ["python", "storage.py"]